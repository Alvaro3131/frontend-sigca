{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Usuario } from 'src/app/equipo-tecnico/reportes/reporte';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.urlpost = 'http://localhost:9090/api/rol/roles';\n    this._usuario = new Usuario();\n    this._token = \"\";\n  }\n  get usuario() {\n    if (this._usuario != null) {\n      return this._usuario;\n    } else if (this._usuario == null && sessionStorage.getItem('usuario') != null) {\n      this._usuario = JSON.parse(sessionStorage.getItem('usuario'));\n      return this._usuario;\n    }\n    return new Usuario();\n  }\n  get token() {\n    if (this._token != null) {\n      return this._token;\n    } else if (this._token == null && sessionStorage.getItem('token') != null) {\n      this._token = sessionStorage.getItem('token') || '{}';\n      return this._token;\n    }\n    return null;\n  }\n  login(usuario) {\n    const urlEndpoint = 'http://localhost:9090/oauth/token';\n    const credenciales = btoa('angularapp' + ':' + '1234567');\n    const httpHeaders = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Basic ' + credenciales\n    });\n    let params = new URLSearchParams();\n    params.set('grant_type', 'password');\n    params.set('username', usuario.username);\n    params.set('password', usuario.password);\n    return this.http.post(urlEndpoint, params.toString(), {\n      headers: httpHeaders\n    });\n  }\n  guardarUsuario(accessToken) {\n    let payload = this.obtenerDatosToken(accessToken);\n    this._usuario = new Usuario();\n    this._usuario.username = payload.user_name;\n    this._usuario.roles = payload.authorities;\n    sessionStorage.setItem(\"idusuario\", payload.id);\n    sessionStorage.setItem(\"nombreusuario\", payload.nombre);\n    sessionStorage.setItem(\"usuario\", JSON.stringify(this._usuario));\n  }\n  guardarToken(accessToken) {\n    this._token = accessToken;\n    sessionStorage.setItem('token', accessToken);\n  }\n  obtenerDatosToken(accessToken) {\n    if (accessToken != null) {\n      if (accessToken.length > 0) {\n        return JSON.parse(atob(accessToken.split('.')[1]));\n      }\n    }\n    return null;\n  }\n  isAuthenticated() {\n    let payload = this.obtenerDatosToken(this.token);\n    if (payload != null && payload.user_name && payload.user_name.length > 0) {\n      return true;\n    }\n    return false;\n  }\n  logout() {\n    // this._token=null;\n    // this._usuario = null;\n    sessionStorage.clear();\n    sessionStorage.removeItem('token');\n    sessionStorage.removeItem('usuario');\n  }\n  getRoles(id) {\n    return this.http.get(`${this.urlpost}/${id}`);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","Usuario","AuthService","constructor","http","_usuario","_token","usuario","sessionStorage","getItem","JSON","parse","token","login","urlEndpoint","credenciales","btoa","httpHeaders","params","URLSearchParams","set","username","password","post","toString","headers","guardarUsuario","accessToken","payload","obtenerDatosToken","user_name","roles","authorities","setItem","id","nombre","stringify","guardarToken","length","atob","split","isAuthenticated","logout","clear","removeItem","getRoles","get","urlpost","factory","providedIn"],"sourceRoot":"","sources":["/Users/alvaroalvachipana/Documents/Proyectos/Universidad/frontend-sigca/src/app/core/presentation/view/login/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Rol, Usuario } from 'src/app/equipo-tecnico/reportes/reporte';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private _usuario:Usuario;\n  private _token: string;\n \n   constructor(private http:HttpClient) { \n     this._usuario = new Usuario();\n     this._token = \"\";\n   }\n   private urlpost:string ='http://localhost:9090/api/rol/roles';\n   public get usuario():Usuario{\n     if(this._usuario != null){\n       return this._usuario;\n     }else if(this._usuario == null && sessionStorage.getItem('usuario')!=null){\n         this._usuario = JSON.parse(sessionStorage.getItem('usuario')!) as Usuario;\n         return this._usuario;\n     }\n     return new Usuario();\n   }\n   public get token():string | any{\n     if(this._token != null){\n       return this._token;\n     }else if(this._token == null && sessionStorage.getItem('token')!=null){\n         this._token = sessionStorage.getItem('token') || '{}';\n         return this._token;\n     }\n     return null;\n \n   }\n \n   login(usuario: Usuario):Observable<any>{\n    \n     const urlEndpoint = 'http://localhost:9090/oauth/token';\n     const credenciales = btoa('angularapp' + ':' + '1234567');\n     const httpHeaders = new HttpHeaders({'Content-Type': 'application/x-www-form-urlencoded',\n     'Authorization': 'Basic '+ credenciales});\n     let params = new URLSearchParams();\n     params.set('grant_type', 'password');\n     params.set('username', usuario.username);\n     params.set('password', usuario.password);\n \n     return this.http.post<any>(urlEndpoint, params.toString(), {headers: httpHeaders});\n   }\n   guardarUsuario(accessToken: string):void{\n     let payload = this.obtenerDatosToken(accessToken);\n     this._usuario = new Usuario();\n     \n     this._usuario.username = payload.user_name;\n     this._usuario.roles = payload.authorities;\n     sessionStorage.setItem(\"idusuario\", payload.id);\n     sessionStorage.setItem(\"nombreusuario\", payload.nombre);\n     sessionStorage.setItem(\"usuario\", JSON.stringify(this._usuario));\n     \n   }\n   guardarToken(accessToken:string):void{\n       this._token = accessToken;\n       sessionStorage.setItem('token',accessToken);\n   }\n \n   obtenerDatosToken(accessToken:string):any{\n       if(accessToken != null){\n         if(accessToken.length>0){\n           return JSON.parse(atob(accessToken.split('.')[1]));\n         }      \n       }\n         return null;       \n   }\n \n isAuthenticated():boolean{\n   let payload = this.obtenerDatosToken(this.token);\n \n   if(payload !=null && payload.user_name && payload.user_name.length >0){\n       return true;\n   }\n return false;\n }\n logout():void{\n  // this._token=null;\n  // this._usuario = null;\n   sessionStorage.clear();\n   sessionStorage.removeItem('token');\n   sessionStorage.removeItem('usuario');\n }\n\n getRoles(id:number){\n  return this.http.get<Rol[]>(`${this.urlpost}/${id}`)\n }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}